<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btn%" xml:space="preserve">
    <value>Percentage Operator
Input operator and press "%" then add another operator to find percentage out of.
Keyboard equivalent: P</value>
    <comment>ToolTip Percentage Text</comment>
  </data>
  <data name="btn*" xml:space="preserve">
    <value>Multiplication Operator
Input operator and press "*" then add another operator to multiply with.
Keyboard equivalent: *</value>
    <comment>ToolTip Multiplication Text</comment>
  </data>
  <data name="btn+" xml:space="preserve">
    <value>Addition Operator
Input operator and press "+" then add another operator to add with.
Keyboard equivalent: +</value>
    <comment>ToolTip Addition Text</comment>
  </data>
  <data name="btn+/-" xml:space="preserve">
    <value>Negation Button
Input operator and press "+/-" to negate the number.
Keyboard equivalent: N</value>
    <comment>ToolTip Negation Text</comment>
  </data>
  <data name="btn-" xml:space="preserve">
    <value>Subtraction Operator
Input operator and press "-" then add another operator to subtract with.
Keyboard equivalent: -</value>
    <comment>ToolTip Subtraction Text</comment>
  </data>
  <data name="btn." xml:space="preserve">
    <value>Decimal Button
Input operator and press "." to add decimal to input.
Keyboard equivalent: .</value>
    <comment>ToolTip Decimal Text</comment>
  </data>
  <data name="btn/" xml:space="preserve">
    <value>Division Operator
Input operator and press "/" then add another operator to divide by.
Keyboard equivalent: /</value>
    <comment>ToolTip Division Text</comment>
  </data>
  <data name="btn0" xml:space="preserve">
    <value>0 Button
Press "0" to include 0 to the operand.
Keyboard equivalent: 0</value>
    <comment>ToolTip 0 Button Text</comment>
  </data>
  <data name="btn1" xml:space="preserve">
    <value>1 Button
Press "1" to include 1 to the operand.
Keyboard equivalent: 1</value>
    <comment>ToolTip 1 Button Text</comment>
  </data>
  <data name="btn1/x" xml:space="preserve">
    <value>Reciprocal Operator
Input operator and press "\" to reciprocate the number.
Keyboard equivalent: \</value>
    <comment>ToolTip Reciprocal Text</comment>
  </data>
  <data name="btn2" xml:space="preserve">
    <value>2 Button
Press "2" to include 2 to the operand.
Keyboard equivalent: 2</value>
    <comment>ToolTip 2 Button Text</comment>
  </data>
  <data name="btn3" xml:space="preserve">
    <value>3 Button
Press "3" to include 3 to the operand.
Keyboard equivalent: 3</value>
    <comment>ToolTip 3 Button Text</comment>
  </data>
  <data name="btn4" xml:space="preserve">
    <value>4 Button
Press "4" to include 4 to the operand.
Keyboard equivalent: 4</value>
    <comment>ToolTip 4 Button Text</comment>
  </data>
  <data name="btn5" xml:space="preserve">
    <value>5 Button
Press "5" to include 5 to the operand.
Keyboard equivalent: 5</value>
    <comment>ToolTip 5 Button Text</comment>
  </data>
  <data name="btn6" xml:space="preserve">
    <value>6 Button
Press "6" to include 6 to the operand.
Keyboard equivalent: 6</value>
    <comment>ToolTip 6 Button Text</comment>
  </data>
  <data name="btn7" xml:space="preserve">
    <value>7 Button
Press "7" to include 7 to the operand.
Keyboard equivalent: 7</value>
    <comment>ToolTip 7 Button Text</comment>
  </data>
  <data name="btn8" xml:space="preserve">
    <value>8 Button
Press "8" to include 8 to the operand.
Keyboard equivalent: 8</value>
    <comment>ToolTip 8 Button Text</comment>
  </data>
  <data name="btn9" xml:space="preserve">
    <value>9 Button
Press "9" to include 9 to the operand.
Keyboard equivalent: 9</value>
    <comment>ToolTip 9 Button Text</comment>
  </data>
  <data name="btnAns" xml:space="preserve">
    <value>Answer Button
Press "Ans" to input previous result as operand.
Keyboard equivalent: A</value>
    <comment>ToolTip Ans Button Text</comment>
  </data>
  <data name="btnC" xml:space="preserve">
    <value>Cancel Operator
Press "C" to cancel recent operation.
Keyboard equivalent: Esc</value>
    <comment>ToolTip Cancel Text</comment>
  </data>
  <data name="btnCE" xml:space="preserve">
    <value>Cancel Entry Operator
Press "CE" to cancel current entry of operand.
Keyboard equivalent: Del</value>
    <comment>ToolTip Cancel Entry Text</comment>
  </data>
  <data name="btnCos" xml:space="preserve">
    <value>Cosine Operator
Input operator and press "Cos" to find cos of a number.
Keyboard equivalent: C</value>
    <comment>ToolTip Cos Text</comment>
  </data>
  <data name="btnDel" xml:space="preserve">
    <value>Delete Operator
Press "Del" to remove the last inputted number.
Keyboard equivalent: Backspace</value>
    <comment>ToolTip Delete Text</comment>
  </data>
  <data name="btnExp" xml:space="preserve">
    <value>Exponent Operator
Input operator and press "Exp" to find exponent to a number.
Keyboard equivalent: E</value>
    <comment>ToolTip Exponential Text</comment>
  </data>
  <data name="btnLog" xml:space="preserve">
    <value>Logarithm Operator
Input operator and press "Log" to find log of a number.
Keyboard equivalent: L</value>
    <comment>ToolTip Logaritm Text</comment>
  </data>
  <data name="btnM+" xml:space="preserve">
    <value>Memory Add Button
Press "M+" to add to the stored number.
Keyboard equivalent: F6</value>
    <comment>Memory Add Text</comment>
  </data>
  <data name="btnM-" xml:space="preserve">
    <value>Memory Subtract Button
Press "M-" to from the stored number.
Keyboard equivalent: F7</value>
    <comment>Memory Subtract Text</comment>
  </data>
  <data name="btnMC" xml:space="preserve">
    <value>Memory Clear Button
Press "MC" to clear the stored number.
Keyboard equivalent: F5</value>
    <comment>Memory Clear Text</comment>
  </data>
  <data name="btnMR" xml:space="preserve">
    <value>Memory Read Button
Press "MR" to read the stored number.
Keyboard equivalent: F9</value>
    <comment>Memory Read Text</comment>
  </data>
  <data name="btnMS" xml:space="preserve">
    <value>Memory Save Button
Press "MS" to save the number.
Keyboard equivalent: F8</value>
    <comment>Memory Save Text</comment>
  </data>
  <data name="btnSin" xml:space="preserve">
    <value>Sine Operator
Input operator and press "Sin" to find sin of a number.
Keyboard equivalent: S</value>
    <comment>ToolTip Sin Text</comment>
  </data>
  <data name="btnSqrt" xml:space="preserve">
    <value>Square Root Operator
Input operator and press "Sqrt" to its root.
Keyboard equivalent: R</value>
    <comment>SquareRoot Text</comment>
  </data>
  <data name="btnTan" xml:space="preserve">
    <value>Tangent Operator
Input operator and press "Tan" to find tan of a number.
Keyboard equivalent: T</value>
    <comment>ToolTip Tan Text</comment>
  </data>
  <data name="btn^" xml:space="preserve">
    <value>Power Operator
Input operator and press "^" then add another operator to find power of.
Keyboard equivalent: O</value>
    <comment>ToolTip Power Text</comment>
  </data>
</root>